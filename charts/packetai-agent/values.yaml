# Default values for packetai-agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# kube-state-metrics helm chart values goes here
kube-state-metrics:
  collectors:
  - cronjobs
  - daemonsets
  - deployments
  - jobs
  - namespaces
  - nodes
  - persistentvolumeclaims
  - persistentvolumes
  - pods
  - replicasets
  - replicationcontrollers
  - resourcequotas
  - services
  - statefulsets
  - storageclasses
  - volumeattachments

namespaceOverride: ""

global:
  xPaiToken: ""
  paiApiKey: ""
  apiUrl: ""
  k8sProxyEndPoint: "localhost:10249"
  clusterName: ""
  logs:
    enabled: true
    containerRuntime: docker
    containersPath: /var/lib/docker/containers
    podsPath: /var/log/pods #valid only for containerd runtime only
  logsEnable: true
  whitelistNamespaces: ""
  blacklistContainers: ""
  imageTag: v1.14.0-ms-latest
  kubeStateMetrics:
    # if enabled we will use new kube-state-metrics deployed with this chart.
    # otherwise we will use url provided for existing kube-state-metrics
    enabled: true
    url: ""

# packetai agent to collect cluster level metrics (deployments, volumes, replicaset, pods, containers, sts etc..)
clusterAgent:
  topo:
    image:
      repository: public.ecr.aws/packetai/packetai-agent-k8s-deploy
      pullPolicy: Always
    resources:
      limits:
        memory: 300Mi
      requests:
        cpu: 100m
        memory: 150Mi
  metrics:
    image:
      repository: public.ecr.aws/packetai/packetai-agent-k8s-ds
      pullPolicy: Always
    resources:
      limits:
        memory: 1000Mi
      requests:
        cpu: 500m
        memory: 500Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}

# packetai agent to collect node level metrics (cpu, node, container, pods), this is a daemonset
nodeAgent:
  image:
    repository: public.ecr.aws/packetai/packetai-agent-k8s-ds
    pullPolicy: Always
  resources: 
    limits:
      memory: 600Mi
    requests:
      cpu: 200m
      memory: 300Mi
  # schedule packetai agent to below selected nodes
  nodeSelector: {}
  tolerations: []
  affinity: {}
